// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String   @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    ok                Boolean?
    state             String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    walletAddress String?       @unique
    slackUserId   String?       @unique
    slackTeamId   String?
    accounts      Account[]
    sessions      Session[]
    walletConfig  WalletConfig?
    kudosGiven    Kudo[]        @relation("Giver")
    kudosReceived Kudo[]        @relation("Receiver")

    @@unique([slackUserId, slackTeamId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Kudo {
    id         Int      @id @default(autoincrement())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    giverId    String
    receiverId String
    giver      User     @relation("Giver", fields: [giverId], references: [id], onDelete: Cascade)
    receiver   User     @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)

    @@index([giverId])
    @@index([receiverId])
}

model WalletConfig {
    id         Int      @id @default(autoincrement())
    walletData String   @db.Text
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    userId     String   @unique
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model SlackMessage {
    id            Int      @id @default(autoincrement())
    client_msg_id String   @unique
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}
